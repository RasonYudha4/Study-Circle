import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:study_circle/class/models/question.dart';
import 'package:study_circle/class/models/quiz.dart';
import 'package:study_circle/class/services/quiz_service.dart';

part 'quiz_event.dart';
part 'quiz_state.dart';

class QuizBloc extends Bloc<QuizEvent, QuizState> {
  final QuizService _quizService;

  QuizBloc(this._quizService) : super(QuizInitial()) {
    on<LoadQuizEvent>((event, emit) async {
      try {
        emit(QuizLoading());
        final quizzes = await _quizService.getAllQuizzes();
        emit(QuizLoaded(quizzes));
      } catch (e) {
        QuizError('Failed to fetch quizzes');
      }
    });

    on<GetQuizById>((event, emit) async {
      try {
        emit(QuizLoading());
        Quiz? quiz = await _quizService.getQuizById(event.quizId);
        if (quiz != null) {
          emit(QuizLoadedById(quiz));
        } else {
          emit(QuizError('Quiz not found'));
        }
      } catch (e) {
        emit(QuizError('Failed to fetch quiz'));
      }
    });

    on<CreateQuizEvent>((event, emit) async {
      try {
        emit(QuizLoading());
        Quiz newQuiz = Quiz(
          id: '', // ID will be generated by Firestore
          title: event.title,
          questions: event.questions.map((q) => Question.fromMap(q)).toList(),
          scores: {}, // Initialize scores as needed
        );
        await _quizService.createQuiz(newQuiz);
        emit(QuizOperationSuccess('Create quiz success'));
      } catch (e) {
        emit(QuizError('Failed to create quiz'));
      }
    });
  }
}
